#!/usr/bin/env ruby

require 'thor'
require 'thor/group'
require 'erubis'
require 'fileutils'
require 'pathname'

module Cli
  class Generate < Thor
    desc 'spec <name>', 'Add a new spec file named <name> as spec/<name>_spec.rb'
    def spec(name)
      file_name = "spec/#{name}_spec.rb"
      if File.exist?(file_name)
        say_status('already exists', file_name, :yellow)
        return
      end

      File.open("spec/#{name}_spec.rb", 'w') do |f|
        f.puts <<-EOF.gsub('          ', '')
          require 'spec_helper'

          describe '#{name}' do
            before do
              install_extension
            end
          end
        EOF
      end
      say_status('create', file_name)
    end
  end

  class Dumbo < Thor
    desc 'new <name>', 'creates a new extension skeleton'

    def new(name, initial_version = '0.0.1')
      mkdir("#{name}/sql")
      mkdir("#{name}/src")
      mkdir("#{name}/spec")
      mkdir("#{name}/config")
      mkdir("#{name}/lib/tasks")

      spec_helper = Dir.glob(File.expand_path('../../spec/spec_helper.rb', __FILE__))
      spec_helper += Dir.glob(File.expand_path('../../spec/support', __FILE__))

      cp spec_helper, "#{name}/spec"
      cp File.expand_path('../../config/boot.rb', __FILE__), "#{name}/config"

      template_path = File.expand_path('../../template', __FILE__)

      Dir.glob(File.expand_path('../../template/**/*', __FILE__)).each do |template|
        pathname = Pathname.new(template)
        dest_name = pathname.relative_path_from Pathname.new(template_path)

        if pathname.directory?
          mkdir("#{name}/#{dest_name}", true)
          next
        end

        if dest_name.extname == '.erb'
          eruby = Erubis::Eruby.new(File.read(template))
          content = eruby.result(ext_name: name)
          create "#{name}/#{dest_name.sub_ext('')}", content
        else
          cp template, "#{name}/#{dest_name}"
        end
      end

      create "#{name}/#{name}.control", <<-STR
        # #{name} extension
        comment = 'my awesome extension'
        default_version = '#{initial_version}'
        relocatable = true
        requires = ''
      STR
    end

    desc "g GENERATOR args", "generates files for the given generator"
    subcommand "g", Generate



    no_commands do
      def mkdir(path, silent_skip = false)
        if File.directory?(path)
          say_status('skip', "#{path}", :yellow) unless silent_skip
        else
          FileUtils.mkdir_p(path)
          say_status('create', "#{path}")
        end
      end

      def create(path, content, silent_skip = false)
        if File.exist? path
          say_status('skip', path, :yellow) unless silent_skip
        else
          File.open(path, 'w') do |f|
            f.puts content
          end
          say_status('create', path)
        end
      end

      def cp(src, dest, silent_skip = false)
        Array(src).each do |p|
          path = Pathname.new(p)
          if File.directory?(dest)
            if File.exist?("#{dest}/#{path.basename}")
              say_status('skip', "#{dest}/#{path.basename}", :yellow) unless silent_skip
            else
              FileUtils.cp_r p, dest
              say_status('create', "#{dest}/#{path.basename}")
            end
          else
            if File.exist?(dest)
              say_status('skip', dest, :yellow) unless silent_skip
            else
              FileUtils.cp_r p, dest
              say_status('create', dest)
            end
          end
        end
      end
    end
  end
end

Cli::Dumbo.start(ARGV)
