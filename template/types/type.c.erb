#include "<%=typname%>.h"

static inline
<%=typname%> <%=typname%>_from_str(const char *str)
{
	<%=typname%> c = 0;
	// your str to <%=typname%> conversion goes here
	return c;
}

static inline
char *<%=typname%>_to_str(<%=typname%> c)
{
	// allocate enough memory to fit your string
	char *str = palloc0(1 * sizeof(char));
	// your <%=typname%> to str conversion goes here
	return str;
}



PG_FUNCTION_INFO_V1(<%=typname%>_in);
Datum
<%=typname%>_in(PG_FUNCTION_ARGS)
{
	char *str = PG_GETARG_CSTRING(0);
	PG_RETURN_<%=macro%>(<%=typname%>_from_str(str));
}

PG_FUNCTION_INFO_V1(<%=typname%>_out);
Datum
<%=typname%>_out(PG_FUNCTION_ARGS)
{
	<%=typname%> c = PG_GETARG_<%=macro%>(0);
	PG_RETURN_CSTRING(<%=typname%>_to_str(c));
}

PG_FUNCTION_INFO_V1(<%=typname%>_recv);
Datum
<%=typname%>_recv(PG_FUNCTION_ARGS)
{
	StringInfo buf = (StringInfo) PG_GETARG_POINTER(0);
	const char *str = pq_getmsgstring(buf);
	pq_getmsgend(buf);
	PG_RETURN_<%=macro%>(<%=typname%>_from_str(str));
}

PG_FUNCTION_INFO_V1(<%=typname%>_send);
Datum
<%=typname%>_send(PG_FUNCTION_ARGS)
{
	<%=typname%> c = PG_GETARG_<%=macro%>(0);
	StringInfoData buf;

	pq_begintypsend(&buf);
	pq_sendstring(&buf, <%=typname%>_to_str(c));

	PG_RETURN_BYTEA_P(pq_endtypsend(&buf));
}
